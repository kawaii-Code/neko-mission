using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.UI;

public class Enemy : MonoBehaviour
{
    public float Speed;
    public int MaxHealth = 100;
    public Slider HealthBar;
    private int _health;


    private NavMeshAgent _agent;
    // private Rigidbody _rigidbody; //–≤–æ–∑–º–æ–∂–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –∏ –≤—Å—ë –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å üòò - —Ç–∞–∫ –∏ –≤—ã—à–ª–æü§ì
    private LinkedListNode<Vector3> _target;
    private LinkedList<Vector3> _route;

    public event Action<Enemy> Dead; 

    void Start()
    {
        _health = MaxHealth;

        //–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä üëâüó∫üëà
        _route = new LinkedList<Vector3>(GameObject.FindGameObjectsWithTag("WayPointerBase").OrderBy(x => x.name)
            .Select(x => x.transform.position)); // –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫ —Ç–æ—á–µ–∫ - —ç—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                                                 // TODO —Å–¥–µ–ª–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ–ª—É—á—à–µ, –ø–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É —Ç–æ—á–∫–∏ –≤ –º–∞—Ä—à—É—Ç–µ(ü§°)

        _target = _route.First;
        _agent = GetComponent<NavMeshAgent>();
        _agent.SetDestination(_target.Value);
        _agent.speed = Speed;
        UpdateHealthbar();
    }

    private void Update()
    {
        Move();
    }

    // TODO FIX -> –ø–æ –Ω–µ–≤–µ–¥–æ–º–æ–π –º–Ω–µ —Å–µ–π—á–∞—Å –ø—Ä–∏—á–∏–Ω–µ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤—Ä–∞–≥–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Å–æ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏ –≤ –º–∞—Ä—à—Ä—É—Ç–µüò†
    //–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É (–ø–æ–µ–∑–¥–∫–∞ –ø–æ –º–µ—à–∫–∞—Ä—Ç–∞–º –∑–∞–π–º–µ—Ç 20 –º–∏–Ω—É—Ç)
    // –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É (–ø–æ–µ–∑–¥–∫–∞ –ø–æ –º–µ—à–∫–∞—Ä—Ç–∞–º –∑–∞–π–º–µ—Ç 20 –º–∏–Ω—É—Ç)
    public void Move()
    {
        if (_agent.remainingDistance <= _agent.stoppingDistance) //–æ–Ω –≥–æ–≤–æ—Ä–∏—Ç –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –≥–Ω–µ–∑–¥–æ–≤–∞–Ω–∏–µ, –ø–æ–º–æ–≥–∏—Ç–µ
        {
            if (_target.Next != null)
            {
                _target = _target.Next;
                _agent.SetDestination(_target.Value);
            }
        }
    }

    public void Die()
    {
        Dead?.Invoke(this);
        Destroy(gameObject);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
    public void TakeDamage(int damage)
    {
        _health -= damage;
        UpdateHealthbar();

        if (_health <= 0)
        {
            Sounds.Play("duck");
            Die();
        }
        else
        {
            Sounds.Play("click2");
        }
    }

    private void UpdateHealthbar()
    {
        HealthBar.value = (float)_health / MaxHealth;
    }

    private void OnCollisionEnter(Collision other)
    {
        // –ü—Ä–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–∫–æ–º 
        if (other.gameObject.CompareTag("Player"))
        {
            var Pl = other.gameObject.GetComponent<Player>();
            Pl.TakeDamage(25);
        }
    }
}