using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.UI;

public class Enemy : MonoBehaviour
{
    public float Speed;
    public int MaxHealth = 100;
    public Slider HealthBar;
    public Animator Animator;

    private int _health;
    public bool IsDead;
    private NavMeshAgent _agent;
    // private Rigidbody _rigidbody; //–≤–æ–∑–º–æ–∂–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –∏ –≤—Å—ë –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å üòò - —Ç–∞–∫ –∏ –≤—ã—à–ª–æü§ì
    private LinkedListNode<Vector3> _target;
    private LinkedList<Vector3> _route;

    const int ChaseWalkableAreaMask = 1 << 3;

    public event Action<Enemy> Dead;

    public bool IsChaser = false;
    public float ChaseDistance = 5f;
    public float ReturnDistance = 10f;

    private bool _isChasing;
    private Vector3 _playerLastPosition;
    private float _chaseTimer;
    private Vector3 _chaseStartPoint;
    private Transform _player;

    void Start()
    {
        _health = MaxHealth;

        //–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä üëâüó∫üëà
        _route = new LinkedList<Vector3>(GameObject.FindGameObjectsWithTag("WayPointerBase").OrderBy(x => x.name)
            .Select(x => x.transform.position)); // –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫ —Ç–æ—á–µ–∫ - —ç—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                                                 // TODO —Å–¥–µ–ª–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ–ª—É—á—à–µ, –ø–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É —Ç–æ—á–∫–∏ –≤ –º–∞—Ä—à—É—Ç–µ(ü§°)

        _player = GameObject.FindGameObjectWithTag("Player").transform;
        _target = _route.First;
        _agent = GetComponent<NavMeshAgent>();
        _agent.SetDestination(_target.Value);
        _agent.speed = Speed;
        UpdateHealthbar();
    }

    private void Update()
    {
        if (IsDead)
            return;
        if (IsChaser)
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –¥–æ –∏–≥—Ä–æ–∫–∞
            var playerPosition = _player.position;
            var distanceToPlayer = Vector3.Distance(playerPosition, transform.position);
            if (!_isChasing && distanceToPlayer < ChaseDistance)
            {
                _isChasing = true;
                if (_chaseStartPoint == Vector3.zero)
                {
                    _chaseStartPoint = transform.position;
                }
            }

            if (_isChasing)
            {
                _agent.areaMask |= ChaseWalkableAreaMask;
                ChasePlayer(distanceToPlayer);
            }
            else
            {
                if (_chaseStartPoint != Vector3.zero)
                {
                    ReturnToChaseStart();
                }
                else
                {
                    _agent.areaMask &= ~ChaseWalkableAreaMask;
                    Move();
                }
            }
        }
        else
            Move();
    }
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏—é —Å –Ω–∞—á–∞–ª–∞ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    private void ReturnToChaseStart()
    {
        var distanceToStartPoint = Vector3.Distance(transform.position, _chaseStartPoint);
        if (distanceToStartPoint > 2f)
        {
            _agent.SetDestination(_chaseStartPoint);
        }
        else
        {
            _chaseStartPoint = Vector3.zero;
            _agent.SetDestination(_target.Value);
        }
    }
    private void ChasePlayer(float distanceToPlayer)
    {
        var playerPosition = _player.position;

        if (distanceToPlayer < ChaseDistance)
        {
            _agent.SetDestination(playerPosition);
        }
        else if (distanceToPlayer >= ReturnDistance)
        {
            _isChasing = false;
        }
        else
        {
            _chaseTimer += Time.deltaTime;

            if (_chaseTimer > 2f)
            {
                _agent.SetDestination(playerPosition);
                _chaseTimer = 0f;
            }
            else
            {
                _isChasing = false;
            }
        }
    }
    // TODO FIX -> –ø–æ –Ω–µ–≤–µ–¥–æ–º–æ–π –º–Ω–µ —Å–µ–π—á–∞—Å –ø—Ä–∏—á–∏–Ω–µ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤—Ä–∞–≥–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Å–æ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏ –≤ –º–∞—Ä—à—Ä—É—Ç–µüò†
    //–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É (–ø–æ–µ–∑–¥–∫–∞ –ø–æ –º–µ—à–∫–∞—Ä—Ç–∞–º –∑–∞–π–º–µ—Ç 20 –º–∏–Ω—É—Ç)
    // –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É (–ø–æ–µ–∑–¥–∫–∞ –ø–æ –º–µ—à–∫–∞—Ä—Ç–∞–º –∑–∞–π–º–µ—Ç 20 –º–∏–Ω—É—Ç)
    public void Move()
    {
        if (_agent.remainingDistance <= _agent.stoppingDistance) //–æ–Ω –≥–æ–≤–æ—Ä–∏—Ç –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –≥–Ω–µ–∑–¥–æ–≤–∞–Ω–∏–µ, –ø–æ–º–æ–≥–∏—Ç–µ
        {
            if (_target.Next != null)
            {
                _target = _target.Next;
                _agent.SetDestination(_target.Value);
            }
        }
    }
    public void Die()
    {
        IsDead = true;
        Sounds.Play("bone-crush");
        _agent.enabled = false;
        GetComponent<BoxCollider>().enabled = false;
        GetComponent<Rigidbody>().Sleep();
        GetComponentInChildren<Canvas>().enabled = false;
        Dead?.Invoke(this);
        Animator.Play("Death");
        Destroy(gameObject, 5);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
    public void TakeDamage(int damage)
    {
        _health -= damage;
        UpdateHealthbar();

        if (_health <= 0)
        {
            Die();
        }
        else
        {
            Sounds.PlayAt("click2", transform.position);
        }
    }

    public IEnumerator ResetSpeed()
    {
        yield return new WaitForSeconds(3f);
        _agent.speed = Speed;
    }


    public void GetSlowedDown()
    {
        StopAllCoroutines();

        if (_health <= 0)
            return;

        _agent.speed = Speed - 4;
        StartCoroutine("ResetSpeed");
    }

    private void UpdateHealthbar()
    {
        HealthBar.value = (float)_health / MaxHealth;
    }

    private void OnDrawGizmos()
    {
        if (IsChaser)
        {
            Gizmos.DrawWireSphere(transform.position, ChaseDistance);
        }
    }
}
